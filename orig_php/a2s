#!/usr/bin/env php
<?php # vim:ts=2:sw=2:et:ft=php
/*
 * a2s: CLI utility for ASCIIToSVG
 * Copyright © 2012 Devon H. O'Dell <devon.odell@gmail.com>
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *  o Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *  o Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

namespace org\dh0\a2s;

require_once 'ASCIIToSVG.php';

error_reporting(E_ALL|E_STRICT);

$opts = getopt("bf::hi::o::s::");

if (isset($opts['h'])) {
  echo <<<USAGE
Usage: a2s [-i[-|filename]] [-o[-|filename]] [-sx-scale,y-scale]
  -b: Disable drop-shadow blur.
  -f: Font family to use.
  -h: This usage screen.
  -i: Path to input text file. If unspecified, or set to "-" (hyphen),
      stdin is used.
  -o: Path to output SVG file. If unspecified or set to "-" (hyphen),
      stdout is used.
  -s: Grid scale in pixels. If unspecified, each grid unit on the X
      axis is set to 9 pixels; each grid unit on the Y axis is 16 pixels.
USAGE;
  exit(1);
}

$input = null;
if (isset($opts['i'])) {
  if ($opts['i'] == '-') {
    $input = file_get_contents('php://stdin');
  } else {
    if (!is_readable($opts['i'])) {
      echo "Can't read file {$opts['i']}.\n";
      exit(1);
    }
    $input = file_get_contents($opts['i']);
  }
} else {
  $input = file_get_contents('php://stdin');
}

if ($input === null) {
  echo "Invalid input file or no input received. Exiting.\n";
  exit(1);
}

if (isset($opts['o'])) {
  if ($opts['o'] == '-') {
    $outFile = 'php://stdout';
  } else {
    if (!file_exists($opts['o'])) {
      if (touch($opts['o']) == false) {
        echo "Cannot write to output file {$opts['o']}.\n";
        exit(1);
      }
      
      $outFile = $opts['o'];
    } else {
      if (!is_writable($opts['o'])) {
        echo "Output file {$opts['o']} is not writable.\n";
        exit(1);
      }
      
      $outFile = $opts['o'];
    }
  }
} else {
  $outFile = 'php://stdout';
}

if (isset($opts['s'])) {
  $scale = explode(',', $opts['s']);
  if (count($scale) != 2 || !is_numeric($scale[0]) || 
      is_numeric($scale[1])) {
    echo "Invalid scaling factor \"{$scale[0]},{$scale[1]}\"\n";
    exit(1);
  }
} else {
  $scale = array(9, 16);
}

$o = new ASCIIToSVG($input);

if (isset($opts['b'])) {
  $o->blurDropShadow = false;
}

if (isset($opts['f'])) {
  $o->fontFamily = $opts['f'];
}

$o->setDimensionScale($scale[0], $scale[1]);
$o->parseGrid();

file_put_contents($outFile, $o->render());

/* vim:ts=2:sw=2:et:
 *  * */
